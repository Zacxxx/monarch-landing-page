
/* styles/animations.css */

/* General Keyframes */
@keyframes slowPulse {
  0%, 100% { opacity: 0.8; transform: scale(1); }
  50% { opacity: 1; transform: scale(1.03); }
}

@keyframes gentleFloat {
  0%, 100% { transform: translateY(0); }
  50% { transform: translateY(-8px); }
}

@keyframes subtleShimmer {
  0% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
  100% { background-position: 0% 50%; }
}

@keyframes fadeInShine {
  0% { opacity: 0; }
  50% { opacity: 0.5; text-shadow: 0 0 10px hsl(var(--primary) / 0.5), 0 0 20px hsl(var(--primary) / 0.3); }
  100% { opacity: 1; text-shadow: none; }
}

/* Evolve Section - background handled by InteractiveGridBackground.tsx */


/* Project Showcase Section */
.bg-anim-project-showcase {
  background-color: hsl(var(--card)); 
}
.bg-anim-project-showcase::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-image:
    linear-gradient(hsl(var(--border)/0.8) 1px, transparent 1px), /* Increased line alpha to 0.8 */
    linear-gradient(to right, hsl(var(--border)/0.8) 1px, transparent 1px); /* Increased line alpha to 0.8 */
  background-size: 50px 50px; /* Slightly larger grid squares */
  opacity: 0.5; /* Increased overall opacity from 0.4 to 0.5 */
  animation: subtleGridPan 50s linear infinite;
  z-index: 0; 
}
@keyframes subtleGridPan {
  0% { background-position: 0 0; }
  100% { background-position: 250px 250px; } /* Adjusted to match new size */
}

/* Void Section */
.bg-anim-void::before {
  content: '';
  position: absolute;
  inset: 0;
  background: linear-gradient(135deg, hsl(var(--background)) 0%, hsl(var(--secondary)) 50%, hsl(var(--background)) 100%);
  background-size: 200% 200%;
  animation: subtleShimmer 15s ease infinite;
  opacity: 0.8; 
  z-index: 0;
}
.void-text-effect {
  animation: fadeInShine 2.5s ease-out forwards;
}


/* Nexus Section */
.bg-anim-nexus::before {
  content: '';
  position: absolute;
  inset: -50%; 
  background-image:
    radial-gradient(hsl(var(--primary)/0.35) 1.5px, transparent 2px), /* Slightly increased dot opacity */
    radial-gradient(hsl(var(--accent)/0.25) 1px, transparent 1.5px); /* Slightly increased dot opacity */
  background-size: 60px 60px, 40px 40px; 
  background-position: 0 0, 20px 20px; 
  animation: nexusDrift 30s linear infinite alternate;
  z-index: 0;
}
@keyframes nexusDrift {
  0% { transform: translate(0, 0) rotate(0deg); }
  100% { transform: translate(20px, -20px) rotate(5deg); }
}
.nexus-pulse-glow { 
  animation: pulseGlow 3s infinite ease-in-out;
}
@keyframes pulseGlow {
  0%, 100% { text-shadow: 0 0 5px hsl(var(--primary)/0.4), 0 0 10px hsl(var(--primary)/0.3), 0 0 15px hsl(var(--primary)/0.2); }
  50% { text-shadow: 0 0 10px hsl(var(--primary)/0.6), 0 0 20px hsl(var(--primary)/0.4), 0 0 30px hsl(var(--primary)/0.25); }
}


/* Algorithm Section */
.bg-anim-algorithm {
  background-color: hsl(var(--secondary));
}
.bg-anim-algorithm::before {
  content: '';
  position: absolute;
  inset: 0;
  background:
    linear-gradient(45deg, hsla(var(--foreground), 0.1) 25%, transparent 25%, transparent 75%, hsla(var(--foreground), 0.1) 75%), 
    linear-gradient(45deg, hsla(var(--foreground), 0.1) 25%, transparent 25%, transparent 75%, hsla(var(--foreground), 0.1) 75%) 30px 30px; 
  background-size: 60px 60px;
  opacity: 0.6; 
  animation: subtleDataFlow 20s linear infinite;
  z-index: 0;
}
@keyframes subtleDataFlow {
    0% { background-position: 0 0, 30px 30px; }
    100% { background-position: 60px 60px, 90px 90px; }
}

/* Algorithm Marquee */
.marquee-track {
  display: flex; /* Critical for horizontal layout of items */
  width: fit-content; /* Ensure the track itself is wide enough for its children */
  /* If using 3 blocks for LTR, each block is ~33.33% of track width.
     To scroll one block's worth from left to right, we animate from -33.33% to 0
     or more generally, start further left if track is even wider (e.g. -66.66% to -33.33%) */
  animation: marqueeAnimation 60s linear infinite; /* Increased duration for slower scroll */
}

@keyframes marqueeAnimation {
  /* Scrolls from left to right */
  /* Assumes track contains three identical child blocks for seamless loop.
     Track width will be 3x a block. Start with first block fully visible, meaning
     the track itself is positioned such that its own 0 is where the first block begins.
     To move left-to-right and loop, we need to shift content equivalent to one block's width.
     If track width is e.g. 3000px and one block is 1000px, we shift by 1000px.
     If initial state means block 1 is at 0, block 2 at 1000, block 3 at 2000.
     We want to end up with block 2 at 0, block 3 at 1000, block 1 (wrapped) at 2000.
     This means translating the whole track left by one block's width.
     So, if we imagine the track as 3 units wide (33.33% each of total track width):
     Start: [B1 B2 B3] (B1 visible at 0% of track)
     End:   [B2 B3 B1] (B2 visible at 0% of track)
     This is a translateX from 0 to -33.333% of the track's total width.
     However, CSS animation usually defines 0% as the start, and 100% as the end state.
     To achieve Left-to-Right:
     We can have the content effectively start with the "second" block visible, and move towards the "first" block being visible.
     Imagine the track is [BlockA, BlockB, BlockC].
     If we set initial translateX to -X (where X is width of BlockA), then BlockB is visible.
     Then animate translateX to 0. BlockA becomes visible.
     The key is that the content inside marquee-track must be wide enough.
     With 3 blocks, if each is roughly screen width, total track is ~300% screen width.
     translateX from -66.66% (Block C starts visible) to -33.33% (Block B starts visible) could work.
     Or simpler: translateX from a negative value that places one "lap" of content off-screen to the left,
     then translate to bring it on-screen to the right.
     Let's use a standard LTR marquee: start with content shifted left, animate to original pos.
     If we have 3 blocks, and we want one block to pass by:
     translateX(-33.3333%) means the first of three blocks is off-screen left.
     translateX(0%) means the first of three blocks is now at the start.
     This makes it appear as if it's moving left to right.
  */
  0% { transform: translateX(-33.333%); } /* Start with one block effectively to the left */
  100% { transform: translateX(0%); }   /* End with that block having moved into view, pushing others right */
}


/* Algorithm Glitch Effect (ensure it works with inline-block children in marquee) */
.algorithm-text-glitch {
    position: relative; /* Needed for absolute positioning of pseudo-elements or spans if glitch uses them */
}
.algorithm-text-glitch [data-glitch] {
  position: relative; /* Ensure data-glitch element establishes a stacking context */
  text-shadow: 0.05em 0 0 hsl(var(--accent)/0.6), -0.025em -0.05em 0 hsl(var(--primary)/0.6), 0.025em 0.05em 0 hsl(var(--destructive)/0.6);
  animation: glitch 750ms infinite;
}
.algorithm-text-glitch [data-glitch] span {
  position: absolute;
  top: 0;
  left: 0;
  /* Ensure spans cover the parent h2 correctly */
  width: 100%; 
  height: 100%;
}
.algorithm-text-glitch [data-glitch] span:first-child {
  animation: glitch 650ms infinite;
  clip-path: polygon(0 0, 100% 0, 100% 45%, 0 45%);
  transform: translate(-0.025em, -0.0125em);
  opacity: 0.9; 
}
.algorithm-text-glitch [data-glitch] span:last-child {
  animation: glitch 375ms infinite;
  clip-path: polygon(0 60%, 100% 60%, 100% 100%, 0 100%);
  transform: translate(0.0125em, 0.025em);
  opacity: 0.9; 
}
@keyframes glitch {
  0% { text-shadow: 0.05em 0 0 hsl(var(--accent)/0.6), -0.025em -0.05em 0 hsl(var(--primary)/0.6), 0.025em 0.05em 0 hsl(var(--destructive)/0.6); }
  15% { text-shadow: 0.05em 0 0 hsl(var(--accent)/0.6), -0.025em -0.05em 0 hsl(var(--primary)/0.6), 0.025em 0.05em 0 hsl(var(--destructive)/0.6); }
  16% { text-shadow: -0.05em -0.025em 0 hsl(var(--accent)/0.6), 0.025em 0.05em 0 hsl(var(--primary)/0.6), -0.05em -0.0125em 0 hsl(var(--destructive)/0.6); }
  49% { text-shadow: -0.05em -0.025em 0 hsl(var(--accent)/0.6), 0.025em 0.05em 0 hsl(var(--primary)/0.6), -0.05em -0.0125em 0 hsl(var(--destructive)/0.6); }
  50% { text-shadow: 0.025em 0.05em 0 hsl(var(--accent)/0.6), 0.05em 0 0 hsl(var(--primary)/0.6), 0 -0.05em 0 hsl(var(--destructive)/0.6); }
  99% { text-shadow: 0.025em 0.05em 0 hsl(var(--accent)/0.6), 0.05em 0 0 hsl(var(--primary)/0.6), 0 -0.05em 0 hsl(var(--destructive)/0.6); }
  100% { text-shadow: -0.025em 0 0 hsl(var(--accent)/0.6), -0.025em -0.025em 0 hsl(var(--primary)/0.6), -0.025em -0.05em 0 hsl(var(--destructive)/0.6); }
}

/* Styles for Tech Showcase in AlgorithmSection */
.tech-showcase-item {
  border: 1px solid hsl(var(--border) / 0.7);
  padding: 0.5rem 1rem; /* py-2 px-4 */
  font-family: var(--font-mono);
  font-size: 0.875rem; /* text-sm */
  line-height: 1.25rem; /* leading-tight */
  color: hsl(var(--muted-foreground));
  background-color: hsl(var(--background) / 0.5); /* Slightly transparent background */
  backdrop-filter: blur(2px);
  border-radius: var(--radius);
  transition: all 0.2s ease-in-out;
  box-shadow: 0 2px 4px hsl(var(--primary) / 0.05);
}
.tech-showcase-item:hover {
  color: hsl(var(--accent-foreground));
  background-color: hsl(var(--accent) / 0.6);
  border-color: hsl(var(--accent));
  transform: translateY(-2px) scale(1.03);
  box-shadow: 0 5px 15px hsl(var(--accent) / 0.2);
}


/* Singularity Section */
.bg-anim-singularity::before {
  content: '';
  position: absolute;
  width: 200%; 
  height: 200%;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  background: radial-gradient(ellipse at center, hsl(var(--primary)/0.15) 0%, hsl(var(--background)) 60%); 
  animation: slowPulse 7s infinite ease-in-out;
  z-index: 0;
}
.singularity-text-focus {
  animation: focusIn 2s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
}
@keyframes focusIn {
  0% { transform: scale(1.5); opacity: 0; filter: blur(10px); }
  100% { transform: scale(1); opacity: 1; filter: blur(0px); }
}

/* Horizon Section */
.bg-anim-horizon { 
  animation: horizonShift 20s ease infinite alternate;
  background-size: 150% 150% !important; 
}
@keyframes horizonShift {
  0% { background-position: 0% 50%; }
  100% { background-position: 100% 50%; }
}
.horizon-text-parallax {
  transition: transform 0.5s ease-out;
}


/* Ignite Section */
.bg-anim-ignite::before {
  content: '';
  position: absolute;
  inset: 0;
  background-image:
    radial-gradient(circle at 20% 80%, hsl(var(--destructive)/0.15) 0%, transparent 30%),
    radial-gradient(circle at 80% 30%, hsl(var(--primary)/0.1) 0%, transparent 25%);
  animation: igniteSparks 10s infinite ease-in-out;
  opacity: 0; 
  transition: opacity 0.5s ease-out;
  z-index: 0;
}
.group:hover .bg-anim-ignite::before {
  opacity: 1;
}
@keyframes igniteSparks {
  0%, 100% { transform: scale(1) rotate(0deg); opacity: 0.7; }
  50% { transform: scale(1.1) rotate(3deg); opacity: 1; }
}
.ignite-title-glow {
  transition: text-shadow 0.3s ease-out, color 0.3s ease-out;
}
.group:hover .ignite-title-glow {
  text-shadow: 0 0 15px hsl(var(--accent)/0.7), 0 0 25px hsl(var(--accent)/0.5);
}
.ignite-button-enhanced {
  box-shadow: 0 0 0 0 hsl(var(--primary)/0.5);
  transition: all 0.3s ease-out, box-shadow 0.4s ease-out !important; 
}
.group:hover .ignite-button-enhanced:hover {
  box-shadow: 0 0 20px 5px hsl(var(--primary)/0.3);
  transform: translateY(-2px) scale(1.02);
}
.group:hover .ignite-button-enhanced { 
   border-color: hsl(var(--primary)) !important;
}
